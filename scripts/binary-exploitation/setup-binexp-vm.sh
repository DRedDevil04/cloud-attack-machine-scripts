#!/bin/bash

# Binary Exploitation VM Setup Script
# This script sets up a Linux VM for binary exploitation and reverse engineering

set -e

echo "=========================================="
echo "Setting up Binary Exploitation VM"
echo "=========================================="

# Update system packages
echo "[+] Updating system packages..."
sudo apt update && sudo apt upgrade -y

# Install essential development tools
echo "[+] Installing development tools..."
sudo apt install -y \
    build-essential \
    gcc \
    g++ \
    gdb \
    make \
    cmake \
    nasm \
    yasm \
    git \
    vim \
    tmux \
    screen \
    python3 \
    python3-pip \
    python3-dev \
    ruby \
    ruby-dev \
    golang-go \
    nodejs \
    npm \
    unzip \
    zip \
    curl \
    wget \
    file \
    binutils \
    strace \
    ltrace \
    hexdump \
    xxd \
    strings \
    objdump \
    readelf \
    nm \
    ldd \
    checksec

# Install disassemblers and debuggers
echo "[+] Installing reverse engineering tools..."
sudo apt install -y \
    gdb \
    gdb-multiarch \
    radare2 \
    rizin \
    ghidra \
    hexedit \
    ghex \
    bless \
    upx-ucl \
    binwalk \
    foremost

# Install Python exploitation libraries
echo "[+] Installing Python libraries..."
pip3 install --user \
    pwntools \
    ropper \
    capstone \
    keystone-engine \
    unicorn \
    angr \
    r2pipe \
    pycrypto \
    requests \
    z3-solver \
    sympy

# Create directories
echo "[+] Creating directories..."
mkdir -p ~/tools
mkdir -p ~/exploits
mkdir -p ~/challenges
mkdir -p ~/shellcode
cd ~/tools

# Install additional debugging tools
echo "[+] Installing GDB plugins..."

# GEF (GDB Enhanced Features)
bash -c "$(curl -fsSL https://gef.blah.cat/sh)"

# pwndbg
git clone https://github.com/pwndbg/pwndbg.git
cd pwndbg && ./setup.sh
cd ~/tools

# Install reverse engineering frameworks
echo "[+] Installing reverse engineering frameworks..."

# Download and install Ghidra (if not already installed via apt)
if ! command -v ghidra &> /dev/null; then
    cd /tmp
    wget https://github.com/NationalSecurityAgency/ghidra/releases/download/Ghidra_10.4_build/ghidra_10.4_PUBLIC_20230928.zip
    unzip ghidra_10.4_PUBLIC_20230928.zip
    sudo mv ghidra_10.4_PUBLIC /opt/ghidra
    sudo ln -sf /opt/ghidra/ghidraRun /usr/local/bin/ghidra
    cd ~/tools
fi

# Install Binary Ninja (Community Edition)
echo "[+] Installing Binary Ninja Community Edition..."
cd /tmp
wget https://cdn.binary.ninja/installers/BinaryNinja-personal.zip
unzip BinaryNinja-personal.zip
sudo mv binaryninja /opt/binaryninja
sudo ln -sf /opt/binaryninja/binaryninja /usr/local/bin/binaryninja

# Install exploitation tools
echo "[+] Installing exploitation tools..."

# ROPgadget
pip3 install --user ROPGadget

# one_gadget (for libc exploits)
gem install one_gadget

# seccomp-tools
gem install seccomp-tools

# Install shellcode generators
echo "[+] Installing shellcode tools..."

# msfvenom is part of metasploit, install metasploit
curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall
chmod 755 msfinstall
sudo ./msfinstall

# Shellcraft (part of pwntools)
# Already installed with pwntools

# Install fuzzing tools
echo "[+] Installing fuzzing tools..."
sudo apt install -y \
    afl++ \
    american-fuzzy-lop \
    honggfuzz

# Install heap analysis tools
echo "[+] Installing heap analysis tools..."
git clone https://github.com/cloudburst/libheap.git
cd libheap && python3 setup.py install --user
cd ~/tools

# Install binary analysis tools
echo "[+] Installing additional binary analysis tools..."

# Checksec
git clone https://github.com/slimm609/checksec.sh.git
chmod +x checksec.sh/checksec
sudo ln -sf ~/tools/checksec.sh/checksec /usr/local/bin/checksec

# LIEF (Library to Instrument Executable Formats)
pip3 install --user lief

# Pwninit for CTF setup automation
cargo install pwninit || echo "Cargo not available, skipping pwninit"

# Set up 32-bit support
echo "[+] Setting up 32-bit support..."
sudo dpkg --add-architecture i386
sudo apt update
sudo apt install -y \
    libc6:i386 \
    libc6-dev:i386 \
    libgcc-s1:i386 \
    libstdc++6:i386

# Create useful templates and scripts
echo "[+] Creating templates and scripts..."

# Basic exploit template
cat > ~/exploits/exploit_template.py << 'EOF'
#!/usr/bin/env python3
from pwn import *

# Configuration
binary_path = "./binary"
remote_host = "host"
remote_port = 1337

# Context setup
context.binary = binary_path
context.log_level = 'debug'

def exploit():
    # Local testing
    if args.LOCAL:
        p = process(binary_path)
    # Remote exploitation  
    elif args.REMOTE:
        p = remote(remote_host, remote_port)
    # GDB debugging
    else:
        p = gdb.debug(binary_path, '''
        break main
        continue
        ''')
    
    # Exploit code goes here
    payload = b"A" * 64  # Buffer overflow example
    
    p.sendline(payload)
    p.interactive()

if __name__ == "__main__":
    exploit()
EOF

# Shellcode testing template
cat > ~/shellcode/test_shellcode.py << 'EOF'
#!/usr/bin/env python3
from pwn import *

def test_shellcode(shellcode):
    """Test shellcode in a controlled environment"""
    context.arch = 'amd64'  # Change as needed
    
    # Create executable memory
    p = process(['python3', '-c', '''
import mmap
import os

# Create executable memory page
mem = mmap.mmap(-1, 4096, mmap.PROT_READ | mmap.PROT_WRITE | mmap.PROT_EXEC)
shellcode = bytes.fromhex(input())
mem.write(shellcode)

# Execute shellcode
import ctypes
func = ctypes.CFUNCTYPE(None)(ctypes.addressof(ctypes.c_char.from_buffer(mem, 0)))
func()
'''])
    
    p.sendline(shellcode.hex())
    p.interactive()

if __name__ == "__main__":
    # Example shellcode (execve /bin/sh)
    shellcode = asm(shellcraft.sh())
    test_shellcode(shellcode)
EOF

# CTF setup script
cat > ~/tools/ctf-setup.sh << 'EOF'
#!/bin/bash
if [ $# -eq 0 ]; then
    echo "Usage: $0 <challenge_name>"
    exit 1
fi

challenge=$1
mkdir -p ~/challenges/$challenge
cd ~/challenges/$challenge

echo "Setting up CTF challenge: $challenge"
echo "Directory: $(pwd)"

# Create basic files
touch exploit.py
touch notes.txt
touch flag.txt

# Create exploit template
cat > exploit.py << 'TEMPLATE'
#!/usr/bin/env python3
from pwn import *

binary = "./BINARY_NAME"
context.binary = binary

def exploit():
    p = process(binary)
    # Add exploit code here
    p.interactive()

if __name__ == "__main__":
    exploit()
TEMPLATE

chmod +x exploit.py

echo "CTF directory created with template files"
EOF

chmod +x ~/tools/ctf-setup.sh

# Set up environment
echo "[+] Setting up environment..."
echo 'export PATH=$PATH:~/tools' >> ~/.bashrc
echo 'alias ll="ls -la"' >> ~/.bashrc
echo 'alias ..="cd .."' >> ~/.bashrc
echo 'alias gdb="gdb -q"' >> ~/.bashrc
echo 'alias r2="radare2"' >> ~/.bashrc
echo 'alias checksec="~/tools/checksec.sh/checksec"' >> ~/.bashrc

# Disable ASLR for easier exploitation (can be re-enabled)
echo "[+] Configuring system for exploitation..."
echo 0 | sudo tee /proc/sys/kernel/randomize_va_space

# Create desktop shortcuts
echo "[+] Creating desktop shortcuts..."
mkdir -p ~/Desktop

cat > ~/Desktop/Ghidra.desktop << EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=Ghidra
Comment=Reverse Engineering Framework
Exec=/opt/ghidra/ghidraRun
Icon=ghidra
Terminal=false
StartupNotify=true
Categories=Development;
EOF

cat > ~/Desktop/BinaryNinja.desktop << EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=Binary Ninja
Comment=Reverse Engineering Platform
Exec=/opt/binaryninja/binaryninja
Icon=binaryninja
Terminal=false
StartupNotify=true
Categories=Development;
EOF

echo "=========================================="
echo "Binary Exploitation VM setup completed!"
echo "=========================================="
echo ""
echo "Installed tools:"
echo "- Debuggers: GDB with GEF/pwndbg, radare2, rizin"
echo "- Disassemblers: Ghidra, Binary Ninja, objdump"
echo "- Exploitation: pwntools, ROPgadget, one_gadget"
echo "- Fuzzing: AFL++, honggfuzz"
echo "- Shellcode: msfvenom, shellcraft"
echo "- Analysis: checksec, LIEF, binwalk"
echo ""
echo "Directories:"
echo "- Tools: ~/tools"
echo "- Exploits: ~/exploits"
echo "- Challenges: ~/challenges"
echo "- Shellcode: ~/shellcode"
echo ""
echo "Utility scripts:"
echo "- ~/tools/ctf-setup.sh <challenge_name>"
echo ""
echo "Note: ASLR has been disabled. Re-enable with:"
echo "echo 2 | sudo tee /proc/sys/kernel/randomize_va_space"
echo ""
echo "Please reboot the system to complete the setup."